----------------------------------- DROP TABLES -----------------------------------
START TRANSACTION
DROP TABLE IF EXISTS newsRead;
DROP TABLE IF EXISTS articleforperformance;
DROP TABLE IF EXISTS employee;
DROP TABLE IF EXISTS entry;
DROP TABLE IF EXISTS receipt;
DROP TABLE IF EXISTS article;
DROP TABLE IF EXISTS bankaccount; -- Existiert nicht mehr
DROP TABLE IF EXISTS cash; -- Existiert nicht mehr
DROP TABLE IF EXISTS creditcard; -- Existiert nicht mehr
DROP TABLE IF EXISTS methodofpayment; -- Existiert nicht mehr
DROP TABLE IF EXISTS news;
DROP TABLE IF EXISTS ticketidentifier; -- Existiert nicht mehr
DROP TABLE IF EXISTS reservation; -- Existiert nicht mehr
DROP TABLE IF EXISTS participation;
DROP TABLE IF EXISTS artist;
DROP TABLE IF EXISTS seat; -- Muss f√ºr den Datenbankentwurf der LVA Leitung direkt nach Ticket gedroppt werden
DROP TABLE IF EXISTS ticket;
DROP TABLE IF EXISTS category; -- Existiert nicht mehr
DROP TABLE IF EXISTS coordinate; -- Existiert nicht mehr
DROP TABLE IF EXISTS row;
DROP TABLE IF EXISTS gallery; -- Existiert nicht mehr
DROP TABLE IF EXISTS show;
DROP TABLE IF EXISTS room; -- Existiert nicht mehr
DROP TABLE IF EXISTS location;
DROP TABLE IF EXISTS performance;
DROP TABLE IF EXISTS basket;
DROP TABLE IF EXISTS customer;

COMMIT


----------------------------------- CREATE TABLES -----------------------------------
START TRANSACTION
CREATE TABLE artist (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY,	
	firstname VARCHAR(50) NOT NULL,
	lastname VARCHAR(50) NOT NULL,
	PRIMARY KEY(id)
);

CREATE TABLE performance (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY,
	content VARCHAR(1024),
	description VARCHAR(1024) NOT NULL,	
	durationInMinutes Integer,
	performancetype VARCHAR(50),
	PRIMARY KEY(id)
);

CREATE TABLE participation (	
	artist_id INTEGER NOT NULL,
	perf_id INTEGER NOT NULL, 
	PRIMARY KEY(artist_id, perf_id),
	FOREIGN KEY(artist_id) REFERENCES artist(id),
	FOREIGN KEY(perf_id) REFERENCES performance(id)
);

CREATE TABLE location (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY,
	city VARCHAR(50),
	country VARCHAR(50),
	description VARCHAR(1024),
	postalcode VARCHAR(25),
	street VARCHAR(50),	
	PRIMARY KEY(id)
);

CREATE TABLE show (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY,
	dateofperformance TIMESTAMP,
	priceInCent INTEGER NOT NULL,
	room VARCHAR(50) NOT NULL,
	location_id INTEGER NOT NULL,
	perf_id INTEGER NOT NULL,	
	PRIMARY KEY(id),
	FOREIGN KEY(location_id) REFERENCES location(id),
	FOREIGN KEY(perf_id) REFERENCES performance(id)	
);

CREATE TABLE row (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY,
	sequence INTEGER NOT NULL,
	show_id INTEGER NOT NULL,
	PRIMARY KEY(id),
	FOREIGN KEY(show_id) REFERENCES show(id)
);

CREATE TABLE customer (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY,
	city VARCHAR(50),
	country VARCHAR(50),
	dateofbirth DATE,
	email VARCHAR(255),
	firstname VARCHAR(50) NOT NULL,
	isfemale BOOLEAN,
	lastname VARCHAR(50) NOT NULL,
	points INTEGER,		
	postalcode VARCHAR(25),
	street VARCHAR(50),
	telephonenumber VARCHAR(50),
	title VARCHAR(25),		
	PRIMARY KEY(id)
);

CREATE TABLE basket (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY,
	creationdate DATE NOT NULL,
	cust_id INTEGER,
	PRIMARY KEY(id),
	FOREIGN KEY(cust_id) REFERENCES customer(id),
);

CREATE TABLE ticket (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY,	
	show_id INTEGER,
	PRIMARY KEY(id),
	FOREIGN KEY(show_id) REFERENCES show(id)	
);

CREATE TABLE seat(
	id INTEGER GENERATED BY DEFAULT AS IDENTITY,		
	sequence INTEGER NOT NULL,	
	row_id INTEGER NOT NULL,
	ticket_id INTEGER,
	PRIMARY KEY(id),	
	FOREIGN KEY(row_id) REFERENCES row(id),	
	FOREIGN KEY(ticket_id) REFERENCES ticket(id) ON DELETE SET NULL
);

CREATE TABLE article (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY,	
	description VARCHAR(1024),
	name VARCHAR(100) NOT NULL,
	priceInCent INTEGER,
	priceInPoints INTEGER, 
	PRIMARY KEY(id)	
);

CREATE TABLE articleforperformance(
	article_id INTEGER NOT NULL,
	performance_id INTEGER NOT NULL,
	PRIMARY KEY(article_id, performance_id),
	FOREIGN KEY(article_id) REFERENCES article(id),
	FOREIGN KEY(performance_id) REFERENCES performance(id)
);

CREATE TABLE employee (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY,
	isadmin BOOLEAN NOT NULL,	
	passwordhash VARCHAR(512) NOT NULL,	
	username VARCHAR(50) NOT NULL UNIQUE,
	wrongPasswordCounter INTEGER NOT NULL,	
	PRIMARY KEY(id)
);

CREATE TABLE receipt (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY,
	transactiondate TIMESTAMP NOT NULL,	
	paymentType INTEGER NOT NULL,
	PRIMARY KEY(id)	
);

CREATE TABLE entry (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY,
	amount INTEGER NOT NULL,
	buywithpoints BOOLEAN NOT NULL,
	sold BOOLEAN NOT NULL,	
	article_id INTEGER,
	basket_id INTEGER NOT NULL,
	rec_id INTEGER,
	ticket_id INTEGER,
	PRIMARY KEY(id),
	FOREIGN KEY(article_id) REFERENCES article(id),
	FOREIGN KEY(basket_id) REFERENCES basket(id),
	FOREIGN KEY(rec_id) REFERENCES receipt(id),
	FOREIGN KEY(ticket_id) REFERENCES ticket(id)
);

CREATE TABLE news (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY,
	newstext VARCHAR(1024) NOT NULL,
	submittedon TIMESTAMP NOT NULL,
	title VARCHAR(255) NOT NULL,
	PRIMARY KEY(id)
);

CREATE TABLE newsread (
	employee_id INTEGER NOT NULL,
	news_id INTEGER NOT NULL,
	PRIMARY KEY(employee_id, news_id),
	FOREIGN KEY(employee_id) REFERENCES employee(id),
	FOREIGN KEY(news_id) REFERENCES news(id)
);

COMMIT